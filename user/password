// password.js (Backend - Express.js)
const express = require('express');
const nodemailer = require('nodemailer');
const { getUserByEmail, updatePassword } = require('./userService'); // Services pour gérer les utilisateurs et les mots de passe

const router = express.Router();

router.post('/reset-password', async (req, res) => {
  const { email } = req.body;

  try {
    const user = await getUserByEmail(email);
    if (!user) {
      return res.status(404).json({ message: "Utilisateur non trouvé." });
    }

    // Générer un token de réinitialisation (ici simplifié pour l'exemple)
    const resetToken = 'random-token'; // À remplacer par un vrai mécanisme sécurisé
    const transporter = nodemailer.createTransport({ /* config SMTP */ });
    await transporter.sendMail({
      from: 'no-reply@example.com',
      to: email,
      subject: 'Réinitialisation du mot de passe',
      text: `Utilisez ce token pour réinitialiser votre mot de passe: ${resetToken}`,
    });

    res.json({ message: "Email envoyé." });
  } catch (error) {
    res.status(500).json({ message: "Erreur interne." });
  }
});

router.post('/change-password', async (req, res) => {
  const { resetToken, newPassword } = req.body;

  try {
    // Vérifier le token et l'utilisateur
    const user = await getUserByResetToken(resetToken);
    if (!user) {
      return res.status(400).json({ message: "Token invalide." });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    await updatePassword(user.id, hashedPassword);

    res.json({ message: "Mot de passe mis à jour." });
  } catch (error) {
    res.status(500).json({ message: "Erreur interne." });
  }
});

module.exports = router;

